{"meta":{"title":"时光收藏","subtitle":null,"description":null,"author":"zhangdp","url":"https://blog.hitime.wiki"},"pages":[],"posts":[{"title":"Flyway的部署","slug":"20190705-flyway","date":"2019-07-05T03:46:05.000Z","updated":"2019-07-05T03:50:59.934Z","comments":true,"path":"2019/07/05/20190705-flyway/","link":"","permalink":"https://blog.hitime.wiki/2019/07/05/20190705-flyway/","excerpt":"","text":"介绍Flyway官网的介绍是 数据库的版本控制。跨所有环境的强大架构演变。轻松，愉快和简单的SQL。 三句言简意赅的话如同Flyway本身一样犀利，通过Flyway我们可以轻松简单的对我们系统所使用的数据库进行跨环境版本控制。于是再也不会出现测试2和测试1的表结构不一样的问题了！ 使用 集成Flyway插件以Maven举例： 123456789101112&lt;project xmlns=\"...\"&gt; ... &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.flywaydb&lt;/groupId&gt; &lt;artifactId&gt;flyway-maven-plugin&lt;/artifactId&gt; &lt;version&gt;5.2.4&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 初始化版本 在 resource 文件夹下增加 db/migraton 在 migraton 目录添加基础SQL版本文件：V1__Base_version.sql版本命名规则参见： https://flywaydb.org/getstarted/how主要为V[版本]__[版本名称（以单下划线分隔单词）].sql 运行1mvn flyway:baseline -Dflyway.url=[数据库地址] -Dflyway.user=[数据库用户名] -Dflyway.password=[数据库密码] 此时对应数据库会出现 flyway_schema_history 表，表中记录了初始化版本 &lt;&lt; Flyway Baseline &gt;&gt; 信息 配置执行命令为了每次部署都可以将变更的 SQL 同步到指定环境，我们将 Flyway 执行命令配置到自动部署工具，如下：1mvn flyway:migrate -Dflyway.url=[数据库地址] -Dflyway.user=[数据库用户名] -Dflyway.password=[数据库密码] 这样，Flyway 就配置好了，每次部署都会去resource//db/migraton目录下查找最新的变更记录和数据库中 flyway_schema_history 表记录的变更记录进行比较然后执行有变更的脚本保持结构一致。 更多信息参考：Flyway by Boxfuse • Database Migrations Made Easy.","categories":[],"tags":[{"name":"Flyway","slug":"Flyway","permalink":"https://blog.hitime.wiki/tags/Flyway/"}],"keywords":[]},{"title":"工具收集","slug":"tools","date":"2019-05-10T09:09:28.000Z","updated":"2019-05-10T09:53:06.119Z","comments":true,"path":"2019/05/10/tools/","link":"","permalink":"https://blog.hitime.wiki/2019/05/10/tools/","excerpt":"","text":"部署工具 Travis CI(在线部署工具) 博客系统 Hexo（支持GitHub Pages的Markdown博客系统） 代办工具 Things3(轻量级代办管理工具)OmniFocus(重量级代办管理工具) 代码质量工具 SonarQubeJaCoCo 项目管理工具 Confluence（文档管理）Jira（开发流程管理） 堡垒机 JumpServer SQL审核平台 Yearning 接口管理工具 Eolinker(分开源版和商业版，公司内部可以部署开源版，外部对接可以注册商业版)Swagger(老牌接口管理系统，支持接口文档生成)Postman(单机接口管理测试软件) 编辑工具 Visual Studio Code(和IDEA风格非常像，功能直接强大，插件丰富) 作图工具 OmniGraffle(完美支持Mac的整套打包方案)EdrawMax(亿图，支持非常多种类作图工具，收费，单机)ProcessOn(在线作图工具，图形简单) 数据库工具 NavicatDataGrip(Jetbrains公司出品，擅长于SQL纠错、格式化和事务管理等)PowerDesigner(SyBase公司出品，老牌数据库设计工具，没有Mac版，上世纪设计体验)Pdman(Mac上PowerDesigner替代品，基于Node.js的开源项目) 在线工具 工具集：https://tool.lu/Eolinker工具集：http://tool.eolinker.com/ASCII艺术字：http://patorjk.com/software/taag/Redis命令：http://doc.redisfans.com/在线Markdown：https://stackedit.io/app#yml和properties转换：https://www.toyaml.com/index.html算法面试题库：https://leetcode.com/国外SSD服务器：https://www.linode.com/（支持日本节点）Groovy在线文档：http://groovy-lang.org/gdk.html","categories":[],"tags":[],"keywords":[]},{"title":"反射性能比较","slug":"reflect-profiler","date":"2019-05-03T08:39:13.000Z","updated":"2019-05-03T09:35:01.575Z","comments":true,"path":"2019/05/03/reflect-profiler/","link":"","permalink":"https://blog.hitime.wiki/2019/05/03/reflect-profiler/","excerpt":"","text":"背景最近做央行征信项目在最初的一版设计尝试使用反射来进行方法调用，于是又”深入”的了解下反射的性能。一开始看到网上的文章一篇看起来比较专业的性能对比测试，测试结果如下：从图中可以看到，在最后一行ReflectAsm可谓是性能出众，一骑绝尘让其他反射方式难以望其项背。周末有时间刚好想自己也对反射进行一个性能比较，顺便看看ReflectAsm如此出众是如何做到的，于是噩梦开始。 第一步 写个像模像样的测试代码 实验机器： MacBook Pro (Retina, 13-inch, Early 2015) 处理器 2.9 GHz Intel Core i5 内存 8 GB 1867 MHz DDR3实验环境： java version “1.8.0_101” Java(TM) SE Runtime Environment (build 1.8.0_101-b13) Java HotSpot(TM) 64-Bit Server VM (build 25.101-b13, mixed mode)ReflectAsm版本：1.11.9 本实验不重复实例化对象，只做方法调用。123456789101112131415161718192021222324252627282930313233343536373839public class ReflectTest &#123; public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException, InterruptedException &#123; long count = 1000000000; CalculateTest calculateTest = new CalculateTest(); Class&lt;?&gt; c = Class.forName(\"wiki.hitime.demo.service.CalculateTest\"); Class&lt;?&gt;[] params = new Class[1]; params[0] = Integer.class; Method setNumMethod = c.getMethod(\"setNum\", params); MethodAccess methodAccess = MethodAccess.get(c); int index = methodAccess.getIndex(\"setNum\"); Profiler profiler = new Profiler(\"Reflection count=\" + count); profiler.start(\"直接调用\"); for (int i = 0; i &lt; count; ++i) &#123; calculateTest.setNum(i); &#125; profiler.start(\"标准反射\"); for (int i = 0; i &lt; count; ++i) &#123; setNumMethod.invoke(calculateTest, i); &#125; profiler.start(\"ReflectAsm反射\"); for (int i = 0; i &lt; count; ++i) &#123; methodAccess.invoke(calculateTest, index, i); &#125; profiler.start(\"ReflectionUtils反射\"); for (int i = 0; i &lt; count; ++i) &#123; ReflectionUtils.invokeMethod(setNumMethod, calculateTest, i); &#125; profiler.stop(); profiler.print(); &#125;&#125; 第二步 拿到测试结果大肆夸赞ReflectAsm这一步很重要，一定要拿到一个差距悬殊的结果，为后期夸赞ReflectAsm做好铺垫。原本计划是”运行”一点，图片到手，结论就有。哪知结果跌掉眼镜，如图：总体来看ReflectAsm确实性能出色，执行10亿次耗时3.759秒值得表扬，可是反射什么时候比直接调用还要快，难道在我埋头业务这几年”大清亡了”？ReflectAsm快我们假设是后起之秀，但是这些反射没有一个比直接调用慢的，这是为何？在我思考良久排除了代码问题，得出一个结论”先出场的死得早”，于是我调换了执行顺序，如下图：从上两图可以看出，确实是先出场的都是配角，总体来看先执行的循环因为”宇宙射线”、”太阳黑子”和”黑洞引力”等不可抗拒原因跑的非常慢，至于为何会慢需要后面再来调查，毕竟本文是做反射性能对比的。于是我为了保证基础环境一致进行了分次运行的方式来进行性能统计，结果如下图：从总体结果来看，耗时为：标准反射&gt;ReflectionUtils&gt;ReflectAsm&gt;直接调用，但是这样的结果已经并不重要了，总体大家的性能相差无几并没有网上科普文讲的差距悬殊。 第三步 结论从整体实验过程来看，实验手法有时候决定结果的好坏，如果一开始我将直接调用放在最后，我可能已经得到一个看起来”公正”的结论。从这次实验结论来看，做对比的过程才是实验精髓，结果反倒不那么重要了。根据过程我总结了几点结论： 这种顺序执行对比的方式可能并不适合性能类的实验 ReflectAsm和JDK带的反射性能相差不大，而就只方法调用来看反射和直接调用性能差距也不大（怀疑网上是JDK1.7，而我用的1.8的原因） 强烈建议还是少用反射（本次拿出来的对比结果只是方法调用，实际在这之前我还做过包含对象实例化的对比，结果惨不忍睹）","categories":[],"tags":[],"keywords":[]},{"title":"配置中心Apollo-初探Apollo","slug":"20190105-apollo-1","date":"2019-01-05T09:21:28.000Z","updated":"2019-01-05T12:42:00.000Z","comments":true,"path":"2019/01/05/20190105-apollo-1/","link":"","permalink":"https://blog.hitime.wiki/2019/01/05/20190105-apollo-1/","excerpt":"","text":"简介与简易安装Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。服务端基于 Spring Boot和Spring Cloud 开发，打包后可以直接运行，不需要额外安装 Tomcat 等应用容器。Java 客户端不依赖任何框架，能够运行于所有 Java 运行时环境，同时对 Spring/Spring Boot 环境也有较好的支持。.Net 客户端不依赖任何框架，能够运行于所有 .Net 运行时环境。通过 https://github.com/ctripcorp/apollo/wiki/Quick-Start 可以进行快速安装开始了解 Apollo安装启动登录后进入主页面 配置应用接下来新建 SpringBoot 项目进行 Apollo 配置管理测试设置 Apollo Meta Server 地址来找到Apollo配置中心引入 apollo-client1compile group: 'com.ctrip.framework.apollo', name: 'apollo-client', version: '1.2.0' 通过 properties 配置设置 app.id 来关联Apollo配置中心和应用程序，设置 apollo.bootstrap.enabled 来启用客户端中的 apollo-client 使用配置信息将当前客户端的app.id的值在Apollo配置中心创建项目新增配置 spring.datasource.primary.jdbc-url 并发布在客户端通过接口获取键值以便观察配置值变化情况启动测试程序通过 http://localhost:10008/getValue 获取 spring.datasource.primary.jdbc-url 的值，可以看到已经通过拿到 Apollo 中最新的配置再次在 Apollo 配置中心更新 spring.datasource.primary.jdbc-url 的值为 test，不重启客户端刷新页面便看到键值已经更新Apollo 对键值的获取有多种方式完全能满足日常使用，对原本配置文件配置方式转换到 Apollo 也做了考虑，可以在配置页面选择文本的方式将 properties 中的配置信息导入如果希望把日志相关的配置也放到 Apollo 中管理则可以通过设置 apollo.bootstrap.eagerLoad.enabled=true 方式在日志系统加载之前加载配置信息总体来说 Apollo 对日常的配置信息管理已经做的非常好，后续文章我们将了解一些 Apollo 在应对特殊配置上的使用 Apollo Github主页：https://github.com/ctripcorp/apolloApollo客户端使用：https://github.com/ctripcorp/apollo/wiki/Java客户端使用指南","categories":[],"tags":[{"name":"apollo","slug":"apollo","permalink":"https://blog.hitime.wiki/tags/apollo/"}],"keywords":[]},{"title":"不可不说的Java“锁”事[转载]","slug":"20181230-lock","date":"2018-12-30T11:00:08.000Z","updated":"2018-12-30T11:22:43.000Z","comments":true,"path":"2018/12/30/20181230-lock/","link":"","permalink":"https://blog.hitime.wiki/2018/12/30/20181230-lock/","excerpt":"","text":"转载自https://tech.meituan.com/Java_Lock.html 前言Java提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率。本文旨在对锁相关源码（本文中的源码来自JDK 8和Netty 3.10.6）、使用场景进行举例，为读者介绍主流锁的知识点，以及不同的锁的适用场景。 Java中往往是按照是否含有某一特性来定义锁，我们通过特性将锁进行分组归类，再使用对比的方式进行介绍，帮助大家更快捷的理解相关知识。下面给出本文内容的总体分类目录： 1. 乐观锁 VS 悲观锁乐观锁与悲观锁是一种广义上的概念，体现了看待线程同步的不同角度。在Java和数据库中都有此概念对应的实际应用。 先说概念。对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，synchronized关键字和Lock的实现类都是悲观锁。 而乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。 乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。根据从上面的概念描述我们可以发现： 悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升。光说概念有些抽象，我们来看下乐观锁和悲观锁的调用方式示例：12345678910111213141516// ------------------------- 悲观锁的调用方式 -------------------------// synchronizedpublic synchronized void testMethod() &#123; // 操作同步资源&#125;// ReentrantLockprivate ReentrantLock lock = new ReentrantLock(); // 需要保证多个线程使用的是同一个锁public void modifyPublicResources() &#123; lock.lock(); // 操作同步资源 lock.unlock();&#125;// ------------------------- 乐观锁的调用方式 -------------------------private AtomicInteger atomicInteger = new AtomicInteger(); // 需要保证多个线程使用的是同一个AtomicIntegeratomicInteger.incrementAndGet(); //执行自增1 通过调用方式示例，我们可以发现悲观锁基本都是在显式的锁定之后再操作同步资源，而乐观锁则直接去操作同步资源。那么，为何乐观锁能够做到不锁定同步资源也可以正确的实现线程同步呢？我们通过介绍乐观锁的主要实现方式 “CAS” 的技术原理来为大家解惑。 CAS全称 Compare And Swap（比较与交换），是一种无锁算法。在不使用锁（没有线程被阻塞）的情况下实现多线程之间的变量同步。java.util.concurrent包中的原子类就是通过CAS来实现了乐观锁。 CAS算法涉及到三个操作数： 需要读写的内存值 V。进行比较的值 A。要写入的新值 B。当且仅当 V 的值等于 A 时，CAS通过原子方式用新值B来更新V的值（“比较+更新”整体是一个原子操作），否则不会执行任何操作。一般情况下，“更新”是一个不断重试的操作。 之前提到java.util.concurrent包中的原子类，就是通过CAS来实现了乐观锁，那么我们进入原子类AtomicInteger的源码，看一下AtomicInteger的定义：根据定义我们可以看出各属性的作用： unsafe： 获取并操作内存的数据。valueOffset： 存储value在AtomicInteger中的偏移量。value： 存储AtomicInteger的int值，该属性需要借助volatile关键字保证其在线程间是可见的。接下来，我们查看AtomicInteger的自增函数incrementAndGet()的源码时，发现自增函数底层调用的是unsafe.getAndAddInt()。但是由于JDK本身只有Unsafe.class，只通过class文件中的参数名，并不能很好的了解方法的作用，所以我们通过OpenJDK 8 来查看Unsafe的源码：123456789101112131415161718192021222324// ------------------------- JDK 8 -------------------------// AtomicInteger 自增方法public final int incrementAndGet() &#123; return unsafe.getAndAddInt(this, valueOffset, 1) + 1;&#125;// Unsafe.classpublic final int getAndAddInt(Object var1, long var2, int var4) &#123; int var5; do &#123; var5 = this.getIntVolatile(var1, var2); &#125; while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4)); return var5;&#125;// ------------------------- OpenJDK 8 -------------------------// Unsafe.javapublic final int getAndAddInt(Object o, long offset, int delta) &#123; int v; do &#123; v = getIntVolatile(o, offset); &#125; while (!compareAndSwapInt(o, offset, v, v + delta)); return v;&#125; 根据OpenJDK 8的源码我们可以看出，getAndAddInt()循环获取给定对象o中的偏移量处的值v，然后判断内存值是否等于v。如果相等则将内存值设置为 v + delta，否则返回false，继续循环进行重试，直到设置成功才能退出循环，并且将旧值返回。整个“比较+更新”操作封装在compareAndSwapInt()中，在JNI里是借助于一个CPU指令完成的，属于原子操作，可以保证多个线程都能够看到同一个变量的修改值。 后续JDK通过CPU的cmpxchg指令，去比较寄存器中的 A 和 内存中的值 V。如果相等，就把要写入的新值 B 存入内存中。如果不相等，就将内存值 V 赋值给寄存器中的值 A。然后通过Java代码中的while循环再次调用cmpxchg指令进行重试，直到设置成功为止。 CAS虽然很高效，但是它也存在三大问题，这里也简单说一下： 1.ABA问题。CAS需要在操作值的时候检查内存值是否发生变化，没有发生变化才会更新内存值。但是如果内存值原来是A，后来变成了B，然后又变成了A，那么CAS进行检查时会发现值没有发生变化，但是实际上是有变化的。ABA问题的解决思路就是在变量前面添加版本号，每次变量更新的时候都把版本号加一，这样变化过程就从“A－B－A”变成了“1A－2B－3A”。 JDK从1.5开始提供了AtomicStampedReference类来解决ABA问题，具体操作封装在compareAndSet()中。compareAndSet()首先检查当前引用和当前标志与预期引用和预期标志是否相等，如果都相等，则以原子方式将引用值和标志的值设置为给定的更新值。 2.循环时间长开销大。CAS操作如果长时间不成功，会导致其一直自旋，给CPU带来非常大的开销。 3.只能保证一个共享变量的原子操作。对一个共享变量执行操作时，CAS能够保证原子操作，但是对多个共享变量操作时，CAS是无法保证操作的原子性的。 Java从1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，可以把多个变量放在一个对象里来进行CAS操作。 2. 自旋锁 VS 适应性自旋锁在介绍自旋锁前，我们需要介绍一些前提知识来帮助大家明白自旋锁的概念。 阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。 在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。 而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用-XX:PreBlockSpin来更改）没有成功获得锁，就应当挂起线程。 自旋锁的实现原理同样也是CAS，AtomicInteger中调用unsafe进行自增操作的源码中的do-while循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。自旋锁在JDK1.4.2中引入，使用-XX:+UseSpinning来开启。JDK 6中变为默认开启，并且引入了自适应的自旋锁（适应性自旋锁）。 自适应意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。 在自旋锁中 另有三种常见的锁形式:TicketLock、CLHlock和MCSlock，本文中仅做名词介绍，不做深入讲解，感兴趣的同学可以自行查阅相关资料。 3. 无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁这四种锁是指锁的状态，专门针对synchronized的。在介绍这四种锁状态之前还需要介绍一些额外的知识。 首先为什么Synchronized能实现线程同步？ 在回答这个问题之前我们需要了解两个重要的概念：“Java对象头”、“Monitor”。 Java对象头synchronized是悲观锁，在操作同步资源之前需要给同步资源先加锁，这把锁就是存在Java对象头里的，而Java对象头又是什么呢？ 我们以Hotspot虚拟机为例，Hotspot的对象头主要包括两部分数据：Mark Word（标记字段）、Klass Pointer（类型指针）。synchronized是悲观锁，在操作同步资源之前需要给同步资源先加锁，这把锁就是存在Java对象头里的，而Java对象头又是什么呢？ 我们以Hotspot虚拟机为例，Hotspot的对象头主要包括两部分数据：Mark Word（标记字段）、Klass Pointer（类型指针）。 Mark Word： 默认存储对象的HashCode，分代年龄和锁标志位信息。这些信息都是与对象自身定义无关的数据，所以Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间Mark Word里存储的数据会随着锁标志位的变化而变化。 Klass Point： 对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。 MonitorMonitor可以理解为一个同步工具或一种同步机制，通常被描述为一个对象。每一个Java对象就有一把看不见的锁，称为内部锁或者Monitor锁。 Monitor是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联，同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。 现在话题回到synchronized，synchronized通过Monitor来实现线程同步，Monitor是依赖于底层的操作系统的Mutex Lock（互斥锁）来实现的线程同步。 如同我们在自旋锁中提到的“阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长”。这种方式就是synchronized最初实现同步的方式，这就是JDK 6之前synchronized效率低的原因。这种依赖于操作系统Mutex Lock所实现的锁我们称之为“重量级锁”，JDK 6中为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”。 所以目前锁一共有4种状态，级别从低到高依次是：无锁、偏向锁、轻量级锁和重量级锁。锁状态只能升级不能降级。 通过上面的介绍，我们对synchronized的加锁机制以及相关知识有了一个了解，那么下面我们给出四种锁状态对应的的Mark Word内容，然后再分别讲解四种锁状态的思路以及特点： 无锁无锁没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。 无锁的特点就是修改操作在循环内进行，线程会不断的尝试修改共享资源。如果没有冲突就修改成功并退出，否则就会继续循环尝试。如果有多个线程修改同一个值，必定会有一个线程能修改成功，而其他修改失败的线程会不断重试直到修改成功。上面我们介绍的CAS原理及应用即是无锁的实现。无锁无法全面代替有锁，但无锁在某些场合下的性能是非常高的。 偏向锁偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。 在大多数情况下，锁总是由同一线程多次获得，不存在多线程竞争，所以出现了偏向锁。其目标就是在只有一个线程执行同步代码块时能够提高性能。 当一个线程访问同步代码块并获取锁时，会在Mark Word里存储锁偏向的线程ID。在线程进入和退出同步块时不再通过CAS操作来加锁和解锁，而是检测Mark Word里是否存储着指向当前线程的偏向锁。引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令即可。 偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动释放偏向锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态。撤销偏向锁后恢复到无锁（标志位为“01”）或轻量级锁（标志位为“00”）的状态。 偏向锁在JDK 6及以后的JVM里是默认启用的。可以通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking=false，关闭之后程序默认会进入轻量级锁状态。 轻量级锁是指当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。 在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，然后拷贝对象头中的Mark Word复制到锁记录中。 拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，并将Lock Record里的owner指针指向对象的Mark Word。 如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，表示此对象处于轻量级锁定状态。 如果轻量级锁的更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行，否则说明多个线程竞争锁。 若当前只有一个等待线程，则该线程通过自旋进行等待。但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁升级为重量级锁。 重量级锁升级为重量级锁时，锁标志的状态值变为“10”，此时Mark Word中存储的是指向重量级锁的指针，此时等待锁的线程都会进入阻塞状态。 整体的锁状态升级流程如下：综上，偏向锁通过对比Mark Word解决加锁问题，避免执行CAS操作。而轻量级锁是通过用CAS操作和自旋来解决加锁问题，避免线程阻塞和唤醒而影响性能。重量级锁是将除了拥有锁的线程以外的线程都阻塞。 4. 公平锁 VS 非公平锁公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。 非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。 直接用语言描述可能有点抽象，这里作者用从别处看到的一个例子来讲述一下公平锁和非公平锁。如上图所示，假设有一口水井，有管理员看守，管理员有一把锁，只有拿到锁的人才能够打水，打完水要把锁还给管理员。每个过来打水的人都要管理员的允许并拿到锁之后才能去打水，如果前面有人正在打水，那么这个想要打水的人就必须排队。管理员会查看下一个要去打水的人是不是队伍里排最前面的人，如果是的话，才会给你锁让你去打水；如果你不是排第一的人，就必须去队尾排队，这就是公平锁。 但是对于非公平锁，管理员对打水的人没有要求。即使等待队伍里有排队等待的人，但如果在上一个人刚打完水把锁还给管理员而且管理员还没有允许等待队伍里下一个人去打水时，刚好来了一个插队的人，这个插队的人是可以直接从管理员那里拿到锁去打水，不需要排队，原本排队等待的人只能继续等待。如下图所示：接下来我们通过ReentrantLock的源码来讲解公平锁和非公平锁。根据代码可知，ReentrantLock里面有一个内部类Sync，Sync继承AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在Sync中实现的。它有公平锁FairSync和非公平锁NonfairSync两个子类。ReentrantLock默认使用非公平锁，也可以通过构造器来显示的指定使用公平锁。 下面我们来看一下公平锁与非公平锁的加锁方法的源码:通过上图中的源代码对比，我们可以明显的看出公平锁与非公平锁的lock()方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件：hasQueuedPredecessors()。再进入hasQueuedPredecessors()，可以看到该方法主要做一件事情：主要是判断当前线程是否位于同步队列中的第一个。如果是则返回true，否则返回false。 综上，公平锁就是通过同步队列来实现多个线程按照申请锁的顺序来获取锁，从而实现公平的特性。非公平锁加锁时不考虑排队等待问题，直接尝试获取锁，所以存在后申请却先获得锁的情况。 5. 可重入锁 VS 非可重入锁可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。下面用示例代码来进行分析：12345678910public class Widget &#123; public synchronized void doSomething() &#123; System.out.println(\"方法1执行...\"); doOthers(); &#125; public synchronized void doOthers() &#123; System.out.println(\"方法2执行...\"); &#125;&#125; 在上面的代码中，类中的两个方法都是被内置锁synchronized修饰的，doSomething()方法中调用doOthers()方法。因为内置锁是可重入的，所以同一个线程在调用doOthers()时可以直接获得当前对象的锁，进入doOthers()进行操作。 如果是一个不可重入锁，那么当前线程在调用doOthers()之前需要将执行doSomething()时获取当前对象的锁释放掉，实际上该对象锁已被当前线程所持有，且无法释放。所以此时会出现死锁。 而为什么可重入锁就可以在嵌套调用时可以自动获得锁呢？我们通过图示和源码来分别解析一下。 还是打水的例子，有多个人在排队打水，此时管理员允许锁和同一个人的多个水桶绑定。这个人用多个水桶打水时，第一个水桶和锁绑定并打完水之后，第二个水桶也可以直接和锁绑定并开始打水，所有的水桶都打完水之后打水人才会将锁还给管理员。这个人的所有打水流程都能够成功执行，后续等待的人也能够打到水。这就是可重入锁。但如果是非可重入锁的话，此时管理员只允许锁和同一个人的一个水桶绑定。第一个水桶和锁绑定打完水之后并不会释放锁，导致第二个水桶不能和锁绑定也无法打水。当前线程出现死锁，整个等待队列中的所有线程都无法被唤醒。之前我们说过ReentrantLock和synchronized都是重入锁，那么我们通过重入锁ReentrantLock以及非可重入锁NonReentrantLock的源码来对比分析一下为什么非可重入锁在重复调用同步资源时会出现死锁。 首先ReentrantLock和NonReentrantLock都继承父类AQS，其父类AQS中维护了一个同步状态status来计数重入次数，status初始值为0。 当线程尝试获取锁时，可重入锁先尝试获取并更新status值，如果status == 0表示没有其他线程在执行同步代码，则把status置为1，当前线程开始执行。如果status != 0，则判断当前线程是否是获取到这个锁的线程，如果是的话执行status+1，且当前线程可以再次获取锁。而非可重入锁是直接去获取并尝试更新当前status的值，如果status != 0的话会导致其获取锁失败，当前线程阻塞。 释放锁时，可重入锁同样先获取当前status的值，在当前线程是持有锁的线程的前提下。如果status-1 == 0，则表示当前线程所有重复获取锁的操作都已经执行完毕，然后该线程才会真正释放锁。而非可重入锁则是在确定当前线程是持有锁的线程之后，直接将status置为0，将锁释放。 6. 独享锁 VS 共享锁独享锁和共享锁同样是一种概念。我们先介绍一下具体的概念，然后通过ReentrantLock和ReentrantReadWriteLock的源码来介绍独享锁和共享锁。 独享锁也叫排他锁，是指该锁一次只能被一个线程所持有。如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。JDK中的synchronized和JUC中Lock的实现类就是互斥锁。 共享锁是指该锁可被多个线程所持有。如果线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。 独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享。 下图为ReentrantReadWriteLock的部分源码：我们看到ReentrantReadWriteLock有两把锁：ReadLock和WriteLock，由词知意，一个读锁一个写锁，合称“读写锁”。再进一步观察可以发现ReadLock和WriteLock是靠内部类Sync实现的锁。Sync是AQS的一个子类，这种结构在CountDownLatch、ReentrantLock、Semaphore里面也都存在。 在ReentrantReadWriteLock里面，读锁和写锁的锁主体都是Sync，但读锁和写锁的加锁方式不一样。读锁是共享锁，写锁是独享锁。读锁的共享锁可保证并发读非常高效，而读写、写读、写写的过程互斥，因为读锁和写锁是分离的。所以ReentrantReadWriteLock的并发性相比一般的互斥锁有了很大提升。 那读锁和写锁的具体加锁方式有什么区别呢？在了解源码之前我们需要回顾一下其他知识。在最开始提及AQS的时候我们也提到了state字段（int类型，32位），该字段用来描述有多少线程获持有锁。 在独享锁中这个值通常是0或者1（如果是重入锁的话state值就是重入的次数），在共享锁中state就是持有锁的数量。但是在ReentrantReadWriteLock中有读、写两把锁，所以需要在一个整型变量state上分别描述读锁和写锁的数量（或者也可以叫状态）。于是将state变量“按位切割”切分成了两个部分，高16位表示读锁状态（读锁个数），低16位表示写锁状态（写锁个数）。如下图所示了解了概念之后我们再来看代码，先看写锁的加锁源码：12345678910111213141516171819protected final boolean tryAcquire(int acquires) &#123; Thread current = Thread.currentThread(); int c = getState(); // 取到当前锁的个数 int w = exclusiveCount(c); // 取写锁的个数w if (c != 0) &#123; // 如果已经有线程持有了锁(c!=0) // (Note: if c != 0 and w == 0 then shared count != 0) if (w == 0 || current != getExclusiveOwnerThread()) // 如果写线程数（w）为0（换言之存在读锁） 或者持有锁的线程不是当前线程就返回失败 return false; if (w + exclusiveCount(acquires) &gt; MAX_COUNT) // 如果写入锁的数量大于最大数（65535，2的16次方-1）就抛出一个Error。 throw new Error(\"Maximum lock count exceeded\"); // Reentrant acquire setState(c + acquires); return true; &#125; if (writerShouldBlock() || !compareAndSetState(c, c + acquires)) // 如果当且写线程数为0，并且当前线程需要阻塞那么就返回失败；或者如果通过CAS增加写线程数失败也返回失败。 return false; setExclusiveOwnerThread(current); // 如果c=0，w=0或者c&gt;0，w&gt;0（重入），则设置当前线程或锁的拥有者 return true;&#125; 这段代码首先取到当前锁的个数c，然后再通过c来获取写锁的个数w。因为写锁是低16位，所以取低16位的最大值与当前的c做与运算（ int w = exclusiveCount(c); ），高16位和0与运算后是0，剩下的就是低位运算的值，同时也是持有写锁的线程数目。 在取到写锁线程的数目后，首先判断是否已经有线程持有了锁。如果已经有线程持有了锁(c!=0)，则查看当前写锁线程的数目，如果写线程数为0（即此时存在读锁）或者持有锁的线程不是当前线程就返回失败（涉及到公平锁和非公平锁的实现）。 如果写入锁的数量大于最大数（65535，2的16次方-1）就抛出一个Error。 如果当且写线程数为0（那么读线程也应该为0，因为上面已经处理c!=0的情况），并且当前线程需要阻塞那么就返回失败；如果通过CAS增加写线程数失败也返回失败。 如果c=0,w=0或者c&gt;0,w&gt;0（重入），则设置当前线程或锁的拥有者，返回成功！tryAcquire()除了重入条件（当前线程为获取了写锁的线程）之外，增加了一个读锁是否存在的判断。如果存在读锁，则写锁不能被获取，原因在于：必须确保写锁的操作对读锁可见，如果允许读锁在已被获取的情况下对写锁的获取，那么正在运行的其他读线程就无法感知到当前写线程的操作。 因此，只有等待其他读线程都释放了读锁，写锁才能被当前线程获取，而写锁一旦被获取，则其他读写线程的后续访问均被阻塞。写锁的释放与ReentrantLock的释放过程基本类似，每次释放均减少写状态，当写状态为0时表示写锁已被释放，然后等待的读写线程才能够继续访问读写锁，同时前次写线程的修改对后续的读写线程可见。 接着是读锁的代码：123456789101112131415161718192021222324252627protected final int tryAcquireShared(int unused) &#123; Thread current = Thread.currentThread(); int c = getState(); if (exclusiveCount(c) != 0 &amp;&amp; getExclusiveOwnerThread() != current) return -1; // 如果其他线程已经获取了写锁，则当前线程获取读锁失败，进入等待状态 int r = sharedCount(c); if (!readerShouldBlock() &amp;&amp; r &lt; MAX_COUNT &amp;&amp; compareAndSetState(c, c + SHARED_UNIT)) &#123; if (r == 0) &#123; firstReader = current; firstReaderHoldCount = 1; &#125; else if (firstReader == current) &#123; firstReaderHoldCount++; &#125; else &#123; HoldCounter rh = cachedHoldCounter; if (rh == null || rh.tid != getThreadId(current)) cachedHoldCounter = rh = readHolds.get(); else if (rh.count == 0) readHolds.set(rh); rh.count++; &#125; return 1; &#125; return fullTryAcquireShared(current);&#125; 可以看到在tryAcquireShared(int unused)方法中，如果其他线程已经获取了写锁，则当前线程获取读锁失败，进入等待状态。如果当前线程获取了写锁或者写锁未被获取，则当前线程（线程安全，依靠CAS保证）增加读状态，成功获取读锁。读锁的每次释放（线程安全的，可能有多个读线程同时释放读锁）均减少读状态，减少的值是“1&lt;&lt;16”。所以读写锁才能实现读读的过程共享，而读写、写读、写写的过程互斥。 此时，我们再回头看一下互斥锁ReentrantLock中公平锁和非公平锁的加锁源码：我们发现在ReentrantLock虽然有公平锁和非公平锁两种，但是它们添加的都是独享锁。根据源码所示，当某一个线程调用lock方法获取锁时，如果同步资源没有被其他线程锁住，那么当前线程在使用CAS更新state成功后就会成功抢占该资源。而如果公共资源被占用且不是被当前线程占用，那么就会加锁失败。所以可以确定ReentrantLock无论读操作还是写操作，添加的锁都是都是独享锁。 结语本文Java中常用的锁以及常见的锁的概念进行了基本介绍，并从源码以及实际应用的角度进行了对比分析。限于篇幅以及个人水平，没有在本篇文章中对所有内容进行深层次的讲解。 其实Java本身已经对锁本身进行了良好的封装，降低了研发同学在平时工作中的使用难度。但是研发同学也需要熟悉锁的底层原理，不同场景下选择最适合的锁。而且源码中的思路都是非常好的思路，也是值得大家去学习和借鉴的。","categories":[],"tags":[],"keywords":[]},{"title":"MySQL事务、隔离级别和锁","slug":"2018122201","date":"2018-12-22T12:39:24.000Z","updated":"2018-12-22T12:39:24.000Z","comments":true,"path":"2018/12/22/2018122201/","link":"","permalink":"https://blog.hitime.wiki/2018/12/22/2018122201/","excerpt":"","text":"1. 事务MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！ 在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。 事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。 事务用来管理 INSERT/UPDATE/DELETE 语句 1.1. 事务特性原子性（A tomicity，或称不可分割性）、一致性（C onsistency）、隔离性（I solation，又称独立性）、持久性（D urability）。 原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。 一致性：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。 隔离性：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。 持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。 1.2. 事务并发问题 脏读： 事务 A 读取了事务 B 更新的数据，然后B回滚操作，那么 A 读取到的数据是脏数据 不可重复读： 事务 A 多次读取同一数据，事务 B 在事务 A 多次读取的过程中，对数据作了更新并提交，导致事务 A 多次读取同一数据时，结果不一致。 幻读： 系统管理员 A 将数据库中所有学生的成绩从具体分数改为 ABCDE 等级，但是系统管理员 B 就在这个时候插入了一条具体分数的记录，当系统管理员 A 改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。 2. 隔离级别读未提交事务的最低隔离级别，在这种隔离级别下，一个事务可以读取另外一个事务未提交的数据。 事务 T 在读数据的时候并未对数据进行加锁，事务 T 在修改数据的时候对数据增加行级共享锁T1 在读取数据时，T2 可以对相同数据进行读取、修改。因为 T1 没有进行任何锁操作；当 T2 对记录进行修改时，T1 再次读取数据可以读取到 T2 修改后的数据。因为 T2 对数据进行修改只增加了行级共享锁，T1 可以再增加共享读锁进行数据读取（尽管 T2 没有提交事务） 如上所述，这种隔离级别，会导致脏读现象。 读已提交在一个事务修改数据过程中，如果事务没有进行提交，其他事务不能读取该数据。 事务T在读取数据时增加行级共享锁，读取一旦结束，立即释放；事务T在修改数据时增加行级排他锁，直到事务结束才释放。T1 在读取数据的过程中，T2 也可以对相同数据进行读取，但是不能进行修改（ T1 增加的是共享锁，T2 也可以增加共享锁，但是不能增加排他锁）。T1 读取结束后，会立即释放共享锁，这时 T2 可以增加排他锁，对数据进行修改，而此时 T1 既不能对数据进行读取也不能进行修改，直到 T2 事务结束。 如上所述，这种隔离级别，解决了脏读问题，但是不能解决不可重复读现象。 可重复读事务T在数据读取时，必须增加行级共享锁，直到事务结束；事务T在修改数据过程中，必须增加行级排他锁，直到数据结束。 T1 在读取数据的过程中，T2 也可以对相同数据进行读取，但是不能进行修改（ T1 增加的是共享锁，T2 也可以增加共享锁，但是不能增加排他锁）。直到 T1 事务结束后，才会释放共享锁，这时 T2 才可以增加排他锁，对数据进行修改。 如上所述，这种隔离级别，解决了不可重复读现象，但是这种隔离级别解决不了幻读的问题 T1 进行查询，读取了10条记录，并对十条记录增加了行级锁，此时 T2 是无法对这10行数据进行修改操作的，但是由于没有表级锁，它可以增加一条满足 T1 查询条件的记录。随后 T1 在进行查询时，会发现虽然10条记录没有改变，但是突然多了一条记录。 串行化产生幻读是由于没有进行范围查询时没有增加范围锁。 事务 T 在读取数据时，必须先增加表级共享锁，直到事务结束才释放；事务 T 在修改数据时，必须先增加表级排他锁，直到事务结束才释放。 T1 在读取 A 表时，增加了表级共享锁，此时 T2 也可以读取 A 表，但是不能进行任何数据的修改，直到 T1 事务结束。随后 T2 可以增加对 A 表的表级排他锁，此时 T1 不能读取 A 表中的任何数据，更不能进行修改。 如上所述，可串行化解决了脏读、不可重复读、幻读等读现象，但是隔离级别越来越高的同时，在并发性上也就越来越低。 3. 锁总的来说，InnoDB共有七种类型的锁： 共享/排它锁(Shared and Exclusive Locks) 意向锁(Intention Locks) 记录锁(Record Locks) 间隙锁(Gap Locks) 临键锁(Next-key Locks) 插入意向锁(Insert Intention Locks) 自增锁(Auto-inc Locks) 共享锁/排它锁共享锁又称为读锁，简称 S 锁，顾名思义，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。 排他锁又称为写锁，简称 X 锁，顾名思义，排他锁就是不能与其他所并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据就行读取和修改。 意向锁意向锁分为意向共享锁和意向排他锁，InnoDB 实际应用中，使用的就是意向锁。 意向共享锁，简称 IS，其作用在于：通知数据库接下来需要施加什么锁并对表加锁。如果需要对记录 A 加共享锁，那么此时 InnoDB 会先找到这张表，对该表加意向共享锁之后，再对记录 A 添加共享锁。 意向排他锁，简称 IX，其作用在于：通知数据库接下来需要施加什么锁并对表加锁。如果需要对记录 A 加排他锁，那么此时 InnoDB 会先找到这张表，对该表加意向排他锁之后，再对记录 A 添加共享锁。 记录锁我们已经知道 InnoDB 的细粒度锁是实现在索引记录上的，InnoDB 的索引有两类，聚集索引与二级索引，InnoDB 每个表都会有一个聚集索引，如果定义了PK，那么PK就是聚集索引，如果没有定义PK那么第一个 unique index 是聚集索引，否则 InnoDB 会创建一个隐藏的 row-id 作为聚集索引。聚集索引是如此重要，是因为 InnoDB 的索引和数据时存储在一起的，聚集索引的叶子节点存储的就是行记录。而二级索引的叶子节点存储的是 PK 值，所以就导致了 InnoDB 的二级索引实际上会扫描两遍，第一遍由二级索引找到 PK，第二遍通过 PK 找到行记录。 间隙锁间隙锁封锁的是索引记录中的间隔，间隙锁是在 MySQL 隔离级别是RR的时候才会生效，如果把数据库隔离级别降低到读已提交，间隙锁会自动失效。一般标准情况下可重复读 隔离级别下能解决不可重复读（当行修改）的问题，但是不能解决幻读的问题，但是InnoDB通过间隙锁，保证了对读取范围加锁，从而避免了幻读。 临键锁临键锁是记录锁和间隙锁的组合，它的封锁范围既包含索引记录，也包含索引区间本身，临键锁的目的也是为了避免出现幻读。 插入意向锁意向锁的一种，也称为意向排它锁。 自增锁auto_increment在MySQL中很常见，通常会将主键ID设置为自增长，自增的幅度可以通过auto_increment_offset(起始数字)和auto_increment_increment(自增幅度，每次增加n个数字)两个参数进行控制，可以实现偶数自增以及奇数自增。 总结InnoDB 的 select 操作是用快照读，可以提高读读并发InnoDB 的 update 和 delete 操作为了保证数据的强一致，使用强互斥锁，保证同一行记录修改和删除的串行性。InnoDB 使用插入意向锁，提高插入并发InnoDB 使用间隙锁和临键锁可以避免幻读的发生","categories":[],"tags":[],"keywords":[]},{"title":"从平面到立体——记苏州市场行","slug":"20181217_suzhou","date":"2018-12-17T09:34:43.000Z","updated":"2018-12-17T14:38:58.000Z","comments":true,"path":"2018/12/17/20181217_suzhou/","link":"","permalink":"https://blog.hitime.wiki/2018/12/17/20181217_suzhou/","excerpt":"","text":"紧凑高效的苏州行坐在办公室时，我努力的理解由前线人员反馈给主管再由主管通过PDCA会议紧凑的反馈给产品经理的需求。努力的模拟着我所要设计的功能真实的场景以及场景之外的异常情况。“应该出去看看”，我时常在想。我们不断在了解竞品公司的营销方案和系统设计，极力保证我们是走在“提高人效”的路上。但是实际场景是不是如我所想像的那样？2018年12月15日我有幸成为苏州市场行的一员，通过紧凑高效的一天我们不光了解了竞品公司系统在市场上的反响，还从市场定价策略、市场促销策略和市场品牌策略等方面对公司在市场中有了更立体的认识。 冷清的车市场温暖的交谈早会破冰后我跟随结对的销售文杰走在去市场的路上。路程不远，1公里的路上我听他讲述了昨天因为实名认证问题导致订单被卡在晚上8点50分才放款的遭遇。“这个车商肯定做不了”，他无奈的笑笑说道。他又补充道，“公司风控做的严是应该的，这是为了我们好”。到达市场，因为是周六的缘故看起来冷冷清清的，偌大的市场里只有稀稀拉拉的人在擦车看车。我们进到一家车商里面和老板寒暄了几句便坐下看历史做过的订单。打开手机文杰看见需要更新跟我说“你看，有更新一直在更新，更新说明又会让我们省很多事情”，他看了看更新列表然后点击更新后又说道，“上次上线了一个GPS免录，扫一下GPS条码就有信息了，特别方便”。听到这番话让我触动很大，让我想起了常说的那句话，“前端不负后端，后端不负前端”。我们走访了周边的车商聊了聊市场的规模、车辆品质以及购车群体等情况。看着琳琅满目的车辆以及文杰对公司的前景的看好让我在这个冷清的市场有了温暖的感觉。 畅所欲言的交流下午，我们回到办公室，对上午的所见所闻进行了简单的交流。然后和苏州城市经理周尔刚聊了聊苏州的市场背景以及他们在当地的策略。从谈话中我们了解到苏州市场因为私人代理和竞品公司的恶意返点让整个行业都举步维艰，我们公司的在市场上的产品策略和风控策略还没有形成独特的风格。这就导致车商在向客户推荐金融方案时很难第一时间想到我们公司，我们能做的就是尽量提高我们使用体验通过客情维护让更多的车商记得我们。另外我们还了解到我们的一些提单策略和其他公司略有不同，很多时候在订单都已经走到签约阶段突然被拒绝，这让客户体验非常不好。对最近新做的抵押系统尔刚也有一些看法，说道，“有不少抵押专员和运营反馈新系统不太好用”。对此我解释因为我们的抵押流程之前一直在线下处理，突然搬到线上肯定大家会有些不适应。如果使用一段时间后有任何异常或不理解的地方都可以及时反馈，共同打造一套易用的系统。从交流中我们还从同事口中了解到了其他公司的产品的一些特点，认识到我们现阶段还有很多不足。也让我们从后端走到了前端更加立体的了解了我们公司。 行程掠影清晨出发到达苏州走访市场走访市场德易的车辆介绍牌畅所欲言的交流","categories":[],"tags":[],"keywords":[]},{"title":"Linus，一生只为寻找欢笑","slug":"Linus，一生只为寻找欢笑","date":"2018-12-14T15:58:38.000Z","updated":"2018-12-14T16:01:01.000Z","comments":true,"path":"2018/12/14/Linus，一生只为寻找欢笑/","link":"","permalink":"https://blog.hitime.wiki/2018/12/14/Linus，一生只为寻找欢笑/","excerpt":"","text":"[转载：https://www.oschina.net/news/72562/linus-smell]每个人桌面上一台电脑，这曾经是无数计算机先驱的梦想，这个梦想很早就实现了，在1997年，乔老师和比老师就说过，「比尔，我们共同控制了100%的桌面 系统市场」，当然乔老师没说的是，比老师控制了97%，乔老师还不到3%。时至今日，乔老师走了，比老师颓了，移动终端把传统的 PC 市场冲击的七零八落。普通用户都知道了Windows、Android、OS X 、iOS、BlackBerry等等，但是，他们依然不了解的是另一款在计算机发展史上起到了革命性作用的操作系统：Linux！ 当大家使用 Google 搜索时，使用 Kindle 阅读时，使用淘宝购物时，使用 QQ 聊天时，很多人并不知道，支撑这些软件和服务的，是后台成千上万台 Linux 服务器，它们时时刻刻都在进行着忙碌的运算和数据处理，确保数据信息在人、软件和硬件之间安全的流淌。可以这么说，世界上大部分软件和服务都运行在 Linux 操作系统之上，神马云计算、大数据、移动互联网，说起来风起云涌，其实没有 Linux 全得趴窝（微软除外）。 但是，Linux 和它的缔造者 Linus Torvalds 一样低调，这么牛逼的一个物件，居然只有程序员知道它的传奇，这不科学！所以我准备在这个系列中写写Linus Torvalds：他是 Linux 和 Git 的缔造者，他是一个传统的黑客，与沃兹一样，少年成名，崇尚自由，一生只为寻找欢笑，他，是一个真正的程序员。 注：为了防止大家把 Linux 和 Linus 搞混，我在后面的文章中统一采用 Linus 的中文译名：李纳斯。 李纳斯在2001年出过一本自传，叫做《Just for Fun》，是他和大卫·戴蒙合著的，当年我有幸读到这本书，了解了很多李纳斯的生平轶事，那时我就琢磨，这个天才已经达到人生的巅峰了吧，结果这位兄台并未停止前进的步伐，转手就在2005年搞出了分布式版本控制系统Git，目前几乎全世界的程序员都在用Git管理他们的代码，著名网站Github就是基于Git构建的。无论是 Linux 还是Git，得一即可得天下，结果这哥们以一己之力发起了俩项目，而且都是主力开发人员。最终的结果是，成全了程序员，陶冶了用户，造福了一方百姓。正如李纳 斯自己所言：「My name is Linus, and I am your God.」 Linus（一）——生命的意义1969 年末，李纳斯出生于芬兰的赫尔辛基市，算是赶上了60后的尾巴。小时候他是个其貌不扬的孩子，除了一个鼻子长的「富丽堂皇」之外乏善可陈。他为了让鼻子看 上去小一些，经常戴上眼镜就不愿意摘下来，这个策略和现在的很多大脸女生购买三星的 Galaxy Note 手机有异曲同工之妙。幼时的李纳斯不修边幅邋里邋遢，不怎么费劲数学和物理就学得极好，社交圈却一塌糊涂，他母亲经常和别人说，这孩子非常好养，只要把他 放到一个有电脑的小黑屋里，然后再往里扔点薯条和意大利面，就行了。李纳斯对此表示认同。 李纳斯把年幼的自己定位成 Nerd（书呆子），但是从他的自传里我却感受到了这位天才的有趣之处。他在书的前言里写到： 我对生命的意义有种理论。我们可以在第一章里对读者解释生命的意义何在，这样就可以吸引住他们。一旦他们被吸引，并且付钱买了书，剩下的章节里我们就可以胡扯了。（注：做人要厚道啊） 关 于生命的意义，李纳斯的解释是，有三件事具有生命的意义。它们是你生活当中所有事情的动机。第一是生存，第二是社会秩序，第三是娱乐。生活中所有的事情都 是按这个顺序发展的，娱乐之后便一无所有。因此，从某种意义上来说，生活的意义就是要达到第三个阶段。你一旦达到了第三个阶段，就算成功了。但首先要越过 前两个阶段。 为什么李纳斯会这么说呢，我摘段原文给大家看看，非常有趣： 李纳斯：我给你举个例子来说明这一观点。最明显的是性，它开始只是一种延续生命的手段，后来变成了一种社会性的行为，比如你要结婚才能得到性。再后来，它成了一种娱乐。 大卫：性为什么是娱乐? 李纳斯：好吧，我是在对牛弹琴。我举一个别的例子。 大卫：别别，还是说说性吧 李纳斯：它是在另一个层次上的blablabla…… 大卫(自言自语)：哦，参与就是娱乐，而不是在一旁观看。好，我明白了。 那生存、社会秩序和娱乐又是如何与技术扯上关系的呢？ Linus（二）——天才也疯狂李纳斯是这么解释的，技术的诞生同样是为了人类的生存，而且是为了让人生活的更好。汽车让人跑的更快，飞机让人飞得更高，互联网让人懂得更多，手机让人通信更快，一旦这些技术成了规模，就要并入社会秩序，然后下一个阶段就是娱乐，别看手机现在就是个打电话的工具，但是很快会进入娱乐阶段……（12年后的今天，手机已经彻头彻尾变成了一个娱乐工具，打电话反而成了附属功能）。 李纳斯说：「一切事物都将从生存走向娱乐，但这并不意味着在某个局部地区没有倒退的现象，而且毫无疑问许多地方都有这种情况。有时事物的发展往往分裂的。」 从这些内容我们可以看出，李纳斯有自己的一套理论，而且能自圆其说，其实每个人都有自己的理论，一件事做或者不做，都是自己说服自己，每一次进步，要么是推翻自己的理论，要么是完善自己的理论。李纳斯在很小的时候就建立了自己的理论领地，那就是数学、物理、逻辑，最后是计算机，所以他绝不是自己描述的 Nerd，而是一个大智若愚的牛娃，就像射雕里的郭靖一样，看着傻，其实比谁都精，脑子里装的都是十年二十年后的事儿。而且李纳斯比郭靖牛的地方是，就一个启蒙老师，还是自己的外公，和郭靖一比，高下立判！李纳斯基本上就是个自学成才的典范。 李纳斯的外公是赫尔辛基大学的一位统计学教授，数学家。他有一台Commodore VIC-20计算机（Commodore 是与苹果公司同时期的个人电脑公司，曾经创造过一系列辉煌，1994年破产），这台电脑的主要功能就是没有功能，你唯一能做的事情就是用 Basic 语言在上面编写自己的程序，老爷子当年就是这么做的，比如做一些数学运算和公式计算等。但是老爷子年老眼花，也不愿意打字，于是就把自己的外孙李纳斯放在腿上，让他帮助录入写在纸片上的程序。这种很有场面感的场景一再出现后，李纳斯除了对数学有了初步的认识，同时也把计算机玩的娴熟，很快他就在外公的指导下开始编写自己的程序。 评：很多大师级的人物，很小的时候就能在某个领域内头角峥嵘，展现出一些东西，然后经过长期的练习和创作，最终成为一代传奇。在这个过程里，环境是很重要的，逆境出人才基本上是个伪命题，这句话唯一的作用就是遇到困难时给自己打打鸡血。李纳斯就是个高知子弟，10岁人家就开始玩计算机了，我们10岁在干什么，打沙包么？甩方宝么？即使你在计算机方面有出众的天赋，但18岁以前连计算机的面儿都没见过，你就只能默默的牛逼了。等你真正开始展现出自己才华的时候，人家操作系统已经开发出来了，一入世就差别人十年的身位，除了冷冷的绝望，你还能感受到什么？ 所以现在人们没事就北上广深杭，不是喜欢人多嘴杂空气差，而是在这些一线城市可以接触更多的人和事物，见更高的山，渡更宽的河。不是为了情怀，而是拥有格局。见都没见过，还同一个起跑线呢，一跑就得趴窝。所以，无论这些地方环境多恶劣，竞争多激烈，来的永远多过走的，不为别的，只是为了缓解些许绝望的感觉…… 李纳斯用外公的计算机学会了 Basic 语言，并开始编写各种简单有趣的游戏，然后他又发现了 Basic 并不是计算机唯一能理解的语言，在它的下面，还有一种语言是由0和1组成，可以直接被计算机识别，于是李纳斯又开始用机器码编程，这次他可以控制更多计算机的细节，他与机器变得更加亲密。然后李纳斯就开始上中学了，中学的几年于他而言，其实没有太大变化，因为那些年他几乎都是坐在电脑前面度过的，在这个阶段，他熟练的掌握了汇编语言。 终于有一天，李纳斯向编程世界挺进的步伐变得缓慢下来，因为他上大学了，原因之一是他必须集中精力读书，原因之二是找不到什么项目去做。还有一件事，李纳斯开始服兵役了，那段时光对他来说是如此特殊： 在手执武器上了一个月的「体育课」之后，我便觉得在我有生之年完全有资格从此一动不动，享受平静的生活了。惟一可做的事情就是把编码打入键盘，或者手里端着一瓶比尔森啤酒！ Linus（三）——改变一生的书籍终于，让李纳斯痛苦不堪的兵役终于结束了，除了敲锣打鼓欢庆重生之外，他开始继续拓展自己的编程之路，这时候，生命中最重要的一本书出现了，书的名字叫做《操作系统：设计和实现》，作者是 Andrew S. Tanenbaum。用李纳斯的原话表述就是「这本书把我推上了生命的高峰」。 那个时代 Unix 已经开发出来了。最早 Unix 是用汇编写的，开发过程中 Unix 的两位创始人Ken Thompson 和 Dennis Ritchie觉得用汇编写程序实在是太苦逼了，男人应该对自己好一点！于是老哥俩决定用高级语言来完成下一个版本，他们首先尝试了Fortran，失败！然后又基于BCPL（Basic Combined Programming Lanugage）创建了 B 语言，B 语言可以被认为是那个时代的解释型语言，不能直接生成机器码，效率上完全没法满足系统的需求，再次失败！我们都知道，一再失败的情况下总会有一位英雄人物挺身而出，这次是 Dennis Ritchie，他从失败的大坑中爬起来拍拍土抹抹泪，继续对 B 语言进行改造。这次 Dennis 为 B 增加了数据类型，并让 B 语言能够直接编译为机器码，然后又为这门语言起了个极其响亮的名字：「New B」，读一读神清气爽，念一念气冲云霄，从此一代语言巨星冉冉升起，40年后依然排在兵器排名榜第一位，怎一个牛字了得！当然，Dennis可能考虑了十几年后中国人民的感受，把「New B」改为了 C 语言，并用 C 语言重新编写了 Unix 的内核，Unix 与 C 从此珠联璧合，长相思守，再也无法分离。 操作系统、Unix 和 C 语言可以说是李纳斯心目中神山上的三座圣杯，为了至高无上的荣耀，他首先要攀上峰顶，把这三座圣杯捧在手中，然后再琢磨建造自己的宫殿的事儿。在那一年的夏天，李纳斯开始了高强度的阅读和学习，用他的话说就是做了两件事，「一件事是什么都没做，另一件事是读完了719页的《操作系统：设计和执行》。那本红色的简装本教科书差不多等于睡在了我的床上」。 李纳斯认为，Unix 是一个简洁、干净的操作系统，在 Unix 上的大部分任务都是通过一些基本操作完成的，这些操作被成为「System Call」，顾名思义，这些操作就是你对系统的呼叫，系统通过响应你的呼叫完成工作。比如 fork、clone（创建子进程），比如 open、close、read、write（文件访问）。这些基本的系统调用通过组合可以完成大部分功能。同时，Unix 还提供了极为强大的IPC（进程间通信）方式：pipe（管道）。很多工作在GUI（图形界面）软件环境下的读者，最常用的IPC操作可能是复制、粘贴、鼠标拖拽，这些操作虽然简单，但是必须由人来完成，想要自动化就很困难。而这些在 Unix 上实现起来就像大自然一样自然，你只需要在程序之间开辟出一段缓冲区作为管道，然后父进程和子进程就可以通过这个管道实现进程间通信了。举个例子，以前给大家介绍的查找历史命令的脚本，就利用了管道的功能，如下： 1history | grep apache 这行命令的含义就是查找包含 apache 的历史命令，其中特殊字符【 | 】用来告诉命令行解释器（Shell）将前一个命令的输出通过「管道」作为接下来的一行命令的输入，就这样，一个简单的进程间通信就完成了。 总之，李纳斯在读完这本书之后，就像郭靖修习了九阴真经全本一样，对机器和代码的世界有了更为透彻的认知，接下来的事情就是等待一个打造传奇的机会。 等待的过程中，李纳斯也没闲着，他又开始编程了。好的程序员对编程的喜爱是溢于言表的，以下摘录一些李纳斯的编程感想： 对于喜爱编程的人来说，编程是世界上最有趣的事，比下棋有趣得多！因为你可以自己制订游戏规则，而你制定什么样的规则，也就会随之出现与此规则相符合的结果。 在电脑世界中，你就是创世者，你对所发生的一切拥有最终的控制。如果你功力深厚，你可以是上帝――在一个较小的层面上。 你可以建筑一个这样的房子，有一个活板门，既稳固又实用。但是每个人都可以看出一个仅仅以坚固实用为目的的树上小屋和一个巧妙地利用树本身特点的美妙小屋之间的差异。这是一个将艺术和工程融为一体的工作。编程与造树上小屋有相似之外……在编程中，实用的考虑往往被置于有意思、美观优雅或有震撼力的考虑之后。 在代码的世界里，李纳斯就是一个诗人！ Linus（四）——Linux 诞生Unix 始于上个世纪60年代，在70年代得到了迅猛的发展，这时候的李纳斯还躺在祖父公寓里的摇篮里睡大觉，如果不是后来 Unix 王国自乱阵脚，出现阵营分裂和法律纠纷，可能 Linux 系统根本都不会出现。真实的情况是，Unix 浪费了大把的时间和机会，似乎就是为了等待这个大鼻子、头发纷乱的芬兰小子长大，然后一决高下。李纳斯赢得了自己的时间，他一刻不停的磨练自己的技艺，在清晨的微光中练习算法，在赫尔辛基的雪山上编译代码，随时随地补充的粮草和武器。二十一年之后，李纳斯抚着雪亮的刀锋上路了，他要去追寻属于程序员的最高荣耀。 1991年一月，李纳斯花费了三千五百美元，分期付款购买了一台杂牌组装电脑，内存4兆，CPU 33兆赫，还有一台14英寸的显示器，然后又买了 MINIX 操作系统，用十六张软盘把这个操作系统装到了计算机里。之后，李纳斯又用了一个月的时间，了解了 MINIX 的好和不好，并把这个系统改装成了自己得心应手的「战斗机」，开始了战斗的人生。就是在这台电脑上，催生了 Linux 的初始版本。 Linux 的诞生离不开 MINIX，MINIX 是 Mini Unix 的缩写，是 Andy Tanenbaum 教授编写的迷你版的 Unix 操作系统，源代码可以提供给大学和学生，用于操作系统教学，采用了微内核设计。其中的代码还作为《操作系统：设计与实现》的示例程序，这本书我们在 Linus（三）中提到过，给了李纳斯极大的启发。 李纳斯使用了 MINIX 之后，发现这个系统有很多缺陷，比如性能问题、内核问题、文件系统问题，最大的问题是终端仿真器，也就是我之前总提到的 Terminal，登录学校里的 Unix Server 和上网时，李纳斯都需要终端，但是 MINIX 无法满足这个需求。如果普通人遇到这种问题，估计就是发会呆然后洗洗睡了，或者说「你行你上啊」，李纳斯不是普通人！ 他决定抛开 MINIX，从硬件层面开始，重新设计一个终端仿真器。牛人就是不同凡响，这个决定表明了李纳斯需要从 BIOS、CPU等硬件层面重新开发出一套系统，除此之外，还需要了解如何把信息写入显示器，如何读取键盘输入，如何读写调制解调器，早期储备的汇编语言和 C 语言能力终于派上了用场…… 两个月之后，终端仿真器完成，对此李纳斯非常骄傲： 对于我了不起的成就，萨拉（妹妹）是了解的。我把终端显示给她看，她盯着显示器看了大约五秒钟，看着上面是一串A和一串B，说了声「很好」，然后就没有然后了。我意识到我的成就并不辉煌，这犹如你指给人看你铺设的一条长长的柏油马路，但想向别人解释这条马路的意义是完全不可能的。 当时是三月，也可能是四月，就算彼得盖坦街上的白雪已经化成了雪泥我也不知道，当然我也并不关心。大部分时间我都穿着睡衣趴在相貌平平的计算机前面噼噼啪啪的敲打键盘，窗户上的窗帘遮得严严实实，把阳光和外部世界与我隔离开来。 Linux 操作系统就这样开始了，一发不可收拾。李纳斯的当时编程状态是这样的：编程――睡觉――编程――睡觉――编程――吃饭――编程――睡觉――编程――洗澡――编程…… 实现了终端仿真器之后，李纳斯马不停蹄，开始添加磁盘驱动和文件系统，那一年李纳斯还在上课，但是课程很简单，他唯一的课外活动就是参加每周三晚的同学聚会，这个长着大鼻子的技术天才，常常会因为担心自己缺乏社交能力和容貌丑陋而失眠，对那时的他来说，唯一有趣的事情就是把驱动程序写出来。于是他咬咬牙对自己说，还得干下去。（看来没有女神的好处就是可以写个操作系统出来，然后把自己叫做 上帝）。 随着工作的进展，终端仿真器正在开始向一个操作系统的方向发展，李纳斯显然也看清楚了这一点。 在整个创造 Linux 的过程中，我们没有看到李纳斯使用了什么样高级工具，估计那时也没有，整个系统基本上是一行行代码敲出来的，纯手工打造，这些先贤的编程功底和效率让我们叹为观止，所以，现在，我决定打开终端，输入 vi，然后键入：to be continued，感受一下李纳斯当年编程的风采…… 随着李纳斯不断的敲击键盘，他的终端仿真程序也不停的扩张，从刚开始的小树苗长成了一株盘根错节的大树，树根牢牢的抓住土地，枝丫努力的伸向天空，花朵和果实开始在高远的天空中烁烁发光，所有的细节都在李纳斯的掌控之中。懂行的技术人员都看得出来，这个大鼻子的芬兰小子是准备开发一个操作系统啊。 是年6月份，李纳斯基本确定了要开发一个操作系统内核的计划，并开始着手搜集 Unix 操作系统标准的相关资料。1991年7月3日，格林威治时间上午10点钟，李纳斯在 MINIX 新闻组发出了一封求助邮件，寻求有关 Posix 标准的帮助，他在邮件中写道： 目前我正在 MINIX 系统下做一个项目，对 POSIX 标准很感兴趣。有谁能向我提供一个机器可读的最新的 POSIX 规则？如果能有个 FTP 地址就更好了。 这份公开的邮件是标识 Linux 问世的最早证据。邮件发出后不久，有人就寄来了厚厚的 POSIX 标准，同时赫尔辛基工学院的 Ari Lemke 也对李纳斯的邮件做出了响应，为李纳斯提供了一个 FTP 地址，用来上传他即将完成的操作系统。 注：POSIX 全称是可移植操作系统接口（Portable Operating System Interface）。IEEE 最初制定 POSIX 标准，是为了提高 UNIX 环境下应用程序的可移植性。随着技术的发展，POSIX 开始不局限于 UNIX 系统，后续的 Linux 和 Windows NT 都部分的遵循了该标准。POSIX 在李纳斯开发的过程中起到了灯塔的作用，直接后果就是 Linux 系统从一开始就走在了正规军的康庄大道上，基本没有跑偏过。Linux 几乎可以适配各种类型的硬件体系结构。 标准和 FTP 地址都有了眉目，李纳斯开始实现各种 System Call，以便让 Shell 运行起来。这段时间的工作让李纳斯时常感到灰心丧气，看着增加的代码量，工作似乎前进了一大步，但是检验一下功能又仿佛没有任何进展。有时候他还不得不放弃之前的想法和已经完成的代码实现，另辟蹊径重头再来，即使是在天才面前，代码也能让人欢喜让人忧。 终于 Shell 已经可以在新的操作系统上工作了，李纳斯开始编写拷贝（cp）和列表（ls）等程序。Shell 程序一旦完成，就好像完成了从0到1的飞跃，一切都变得无比顺利，李纳斯面前仿佛出现了一条阳关大道，一切都豁然开朗了，他说，要有光，于是就有了光。对于这种状态，李纳斯表示：「我很满意」，并且开始用「Linux」称呼这个操作系统。 这种满意非常重要，因为那个夏天李纳斯除了伏在电脑面前噼噼啪啪的敲击键盘，什么都没做。芬兰四月到八月的日子是一年中最美好的时光。人们到布满小岛的海上航行，去海滩上晒日光浴，到夏日小木屋中消遣时光。但是李纳斯，他只是在永无休止的编写程序，忘记了白天和黑夜，黑色的窗帘遮蔽了灿烂的阳光，也遮蔽了外面的世界。他唯一的想法就是，得赶紧把这该死的系统做出来！ 1991年8月25日，李纳斯在MINIX 新闻组上发邮件做了一个调查，想知道大家希望这个新的操作系统具备什么特征。 1991年9月17日，李纳斯把已经完成的新操作系统上传到了Ari Lemke提供的 FTP 服务器上，并准备用「Freax」作为操作系统的最终代号，结果遭到了Ari Lemke的激烈反对。Ari Lemke对李纳斯说： 「李哥，您咋会想到用这么变态的名字命名操作系统呢？原来的Linux不挺好的嘛」 「那样不会显得自恋么？」 「您这样就不对了，操作系统是开天辟地的大事，人民群众都等着用您的名字命名呢，看看他们的眼神，您能辜负他们的期望吗？Linux 天生不就是用来了 Unix 遥相呼应的么？这是命，得认！」 「这……那我就不推辞了啊」 以上为意译，不过基本上和古代皇帝的黄袍加身是一个意思。新的操作系统最终以「Linux」命名，并在10年后名扬天下，20年后统治服务器领域，可谓 Linux 恒久远，Linus 永流传。 Linux 内核0.01版本终于发布了，虽然漫长的开发过程才刚刚开始，但李纳斯终于可以松口气了： 瞧，我真的做出了点什么。我没有在骗你们。这就是我所做的…… 创造操作系统，就是去创造一个所有应用程序赖以生存的基础环境――从根本上来说，就是在制定规则：什么可以接受，什么可以做，什么不可以做。事实上，所有的程序都是在制定规则，只不过操作系统是在制定最根本的规则。——李纳斯 Linus（五）——继续前行Linux 从一诞生就被打上了开源的烙印，这一点对 Linux 的后续发展起到了至关重要的作用。从1991年内核0.01版本发布，到1994年1.0版本闪亮登场，世界各地无数的开发者为 Linux 提交了代码，李纳斯为 Linux 建立了讨论组 comp.os.linux，全世界爱好开源和 Linux 的程序员与黑客都在上面讨论问题，他们就像群蜂筑巢一样，不断的通过个体和群体的力量交替推进 Linux 的飞速发展。 李纳斯对自己说：嗯，没有任何东西可以阻挡 Linux 的普及！ 这种感觉估计很多程序员都体会过，当你设计的算法得出了正确结果的时候，当你自以为解决了一个海森堡 bug（Heisenbug，表示不可重现）的时候，当你完成了一段精妙代码的时候，你摘下厚重的眼镜，推开铺满灰尘的书桌，打开办公室唯一的窗户，迎着夕阳把一只废弃的圆珠笔扔出窗外，然后冲着天空大喊：还有谁~~~？这是一种拔剑四顾心茫然的情怀。 李纳斯还不止于此。他不仅单枪匹马写出了 Linux 的内核，而且做出了开源的决定。他把 Linux 放到了互联网上，并且允许那些希望使用和改进它的人们根据开源协议修改和提交源代码。这两点对互联网的影响是极其深远的，估计李纳斯当年也没有想到，当时的两个小小的涟漪，经过时间和空间的放大，十几年后形成了一股互联网巨浪，到现在 Linux 依然处于风口浪尖。 对于 Linux 取得的成功，李纳斯将其归结为是由自己的缺点导致的： 1、 我很懒散2、 我喜欢授权给其他人 其实这两个所谓的缺点，正是优秀程序员和领导者必备的要素，它们让 Linux 成为世界上最大的开源协作项目，为喜爱 Linux 的人们带来了最美好的技术和应用，现代的互联网几乎是运行在 Linux 之上的，可以说，李纳斯改变了世界，你每一次伐开心后在淘宝上买包包，都有李纳斯贡献的力量！ Linus（六）——来到硅谷1996年的春天，Linux 顺利发布了2.0版本。是年李纳斯27岁，这个芬兰小子已经慢慢厌倦了芬兰平淡无奇的日子和不眠不休的编程生活。对于一个技术天才来说，创造一套新的技术体系就像艺术家完成一个雕像一样，当一块粗砺的岩石在他的亲手打磨下逐渐显山露水，展现出其完美容颜的时候，后续的修修补补会让这些天才产生倦怠的感觉。他们需要更快的剑，更高的山和更强大的对手。尤其是期间李纳斯访问过两次美国之后，这种感觉变得愈发不可阻挡了。 说起来美国确实是个神奇的国度，这样一个移民国家中，居住了各种从不同国度不远万里跨海而来的种族，每个种族无论在基因上还是文化上都具有原来国家的特质，这些特质相互融合与对抗，让这块大陆上的人民更锐意进取，更开放，更自由，他们愿意去追求和接纳美好的事物，最终一不留神把美国搞成了世界文化的大熔炉，而开放的文化和环境又极大的激发了人们的想象力和创造力，近代和现代的科技成果几乎全部源于美国，要么是美国人搞的，要么是外国人在美国搞的。所以有时候我们也不用顾影自怜，嘲笑自己没有国产的操作系统和编程语言，因为其他国家也没有，或很少有，芬兰好不容易出了个天才少年，也没好好珍惜，最终落了个「流落」异国他乡的下场。 李纳斯一到美国就被这块新大陆吸引了，一切都是那么的新鲜和美好，他的感受与你第一次出国后在微信朋友圈发的「天是那么的蓝，云是那么的白」是一样一样的。李纳斯在自传中写道： 我所参观的摩门教堂已有一百五十年的历史，却被照顾的很好，清洗后的教堂显示出亮丽的白色。要是在欧洲，所有的教堂都显得老旧不堪，像是蒙上了一层岁月的斑痕。看着这洁白亮丽的教堂，我脑海里产生的唯一联想竟然是迪斯尼乐园。因为它看起来太像是童话故事中的城堡，而不太是一个教堂了。 我记得自己徒步走过了金门大桥。在桥的这头时，我望着对岸的马林海岬，恨不得立刻就到对岸去徜徉在那美丽的群山之间。但等我真走到那边时，我几乎不愿意再挪动双腿……那时的我绝对想不到，在时隔六年以后的今天，我会坐在海风吹拂的海岬峰顶，一面俯瞰太平洋、旧金山湾、金门大桥和笼罩在雾中的旧金山城，一面对着大卫的录音机讲述着这一切。 从美国回到芬兰之后，李纳斯对自己说，我要去美国。 当李纳斯透露出自己的就业计划之后，马上有多家公司递来橄榄枝，其中包括著名的 Linux 公司 Red Hat。这种感觉是如此美妙，就像你刚刚掏出一支香烟，面前已是千百个打火机舞动。但是李纳斯本着不加入任何一家 Linux 公司的原则，拒绝了 Red Hat，参加了另一个名不见经传的公司的面试，这家公司叫做 Transmeta，中译名「全美达」，你们可以从维基百科上查到这家公司，不过我打赌，知道这家公司的读者不会超过千分之一，这并不是咱们孤陋寡闻，因为美国人民刚开始也不知道这家公司在干嘛，全美达官网在1997年中上线，两年半后网站的建设情况是「This web page is not yet here」，又过了很久人们才从内部员工透露出的一点信息得知，这家公司似乎是搞处理器的。这是我所知道的唯一一家保密措施强过苹果的公司，如果不是李纳斯，这家公司就像是根本没有存在过。 就是这样一家公司，面试了在开源社区名满天下的技术天才、Linux 操作系统的缔造者李纳斯，并且将其招至麾下，一待就是六年。从某种程度上，这六年严重的影响了 Linux 操作系统前行的脚步，因为李纳斯没有足够的时间开发 Linux 了。 虽然根据 Transmeta 与李纳斯的协议，他可以继续从事 Linux 的开发，而且他确实也想这么做，比如白天为 Transmeta 工作，编写 X86 解释程序，晚上继续 Linux 的伟大事业。不过真实的情况是，晚上丫睡着了…… 关于加班和睡眠，李纳斯是这么解释的： 很多人都认为加班加点的工作才算真正的工作。我可不这么想。无论是 Transmeta 的工作还是 Linux 的工作，都不是靠牺牲宝贵的睡眠时间换来的。事实上，如果你想听真话，我要说，我更喜欢睡觉。 总之，李纳斯第一次从互联网上消失了，很多悲观的开发者纷纷奔走相告，李纳斯这小子是不是被招安了？丫开始为商业公司干活了，Linux 作为自由软件是不是已经濒临死亡了？每当这时候李纳斯就会出来给大家打打气说，哥还在呢，只不过刚睡醒…… 关于李纳斯的这段经历，曾经在硅谷工作过的一位朋友给我提供了如下文字，大意是这样的： 每次想起李纳斯这段经历，我都要感慨万千。第一次得知李纳斯虎落硅谷的事是在2002年夏天，当地的水星报记者先是把李纳斯大吹一通，然后说他从芬兰老家搬到美国，就职于 Transmeta 已五年有余，但 H1 移民仍然停留在劳工卡初级阶段，六年期满就要打道回府了。 当时这份报纸的读者大概有一半人有 H1 经历，然后这一半人里的一半都知道 Linux 是啥东东，但是从未听说过 Transmeta 是何方神圣，这货居然把一代技术英雄扣在那儿为一个名不见经传的小资本家作苦力，导制全球开源事业停滞不前，真是胆大包天啊！于是很多读者跑到水星报去说，象李纳斯这样的天才愿意移民到美国，布什亲自开飞机去接都不为过，怎么可以被移民局压了五年呢balabala…… 还好，李纳斯在2003年离开了这个叫做「全美达」的公司，受聘于开放源代码开发实验室（OSDL : Open Source Development Labs, Inc），重新统领开源世界的各路英豪，全力开发 Linux 内核，Linux 再次焕发出勃勃生机，这一次，它要引领的是互联网的技术浪潮…… Linus（七）——关于财富李纳斯对待财富的态度就是「视金钱为粪土」，是真的粪土。 那种默然的态度让人感觉非常可怕。当一个人随便动动手挂挂名签个字就能获取上千万美金的时候，他依然和自己的妻女一家人挤在圣克拉拉一栋两层楼的公寓套房里，过着一个普通程序员的生活，同时不断改进已经遍布全球的 Linux，这是什么精神？这是毫不利己专门利人的国际主义战士的精神。 写到这我不禁想起了绿茵场上的冰王子博格坎普，当他接到几十米外的长传，用标志性的慢速停球过掉扑上来的后卫，轻扣，过掉另一个后卫，颠球，闪过最后的防守，面对守门员的时候不是大力抽射和仰天长啸，而是把球搓出一道完美的抛物线，球越过门将，缓缓落入网窝，然后博格坎普，低着头慢慢的走开，留给对手的是优雅与实用并世无双的技艺，和令人绝望的背影！ 默然的感觉，懂了撒？ 很多程序员创业成功或跟随创业成功之后，自以为功成身退，最早扔掉的就是代码和编译器，然后购豪宅当天使满世界贴旅游照片，你们感受一下，这个境界是完全不可同日而语的。（请勿对号入座，如有误伤，必是友军所为） 事实上李纳斯在拿到第一笔真正的财富之前，一直处于日子紧巴巴的状态。当时另两位带头大哥比尔·盖茨和史蒂夫·乔布斯早已名满天下家私万贯，同时有大量的技术人员、商人和公司通过 Linux 及其相关技术获取了巨额财富，对此，李纳斯的态度是：「和我有毛关系」，他似乎对一大群才气不高的编程人员能够享受到大笔的财富并不在意。这种情况一直持续到所有的有识之士都坐不住了：李纳斯，你再也不能这样下去了！ 伦敦的一位企业家希望李纳斯在他羽翼未丰的 Linux 公司做个董事会成员，报酬是一千万美金。李纳斯说，不用。企业家惊呆了，当他喃喃自语「卧槽你特么知道一千万美金是啥概念吗」的时候，李纳斯已默默走远。 Red Hat 公司为了感谢李纳斯的卓越贡献，为他提供了一些期权，李纳斯的回复同样是，不用了，我不会给你独家的授权许可的。Red Hat 的人差点疯掉：「李爷期权您就收着吧，我们什么都不要行了吧」「唔这样啊，那就放这吧」，这就是李纳斯！ 正是这笔期权让李纳斯收获了第一笔巨额财富，因为 Red Hat 1999年8月11日在纳斯达克上市了。李纳斯先是意识到自己从身无分文突然变成了拥有五十万美元的土豪，然后是一百万，五百万，李纳斯终于变得亢奋起来，原来期权也是钱啊！终于不用再为生计发愁了，对着这个事情，李纳斯的定义是：我真是最幸运的家伙！ 事实上李纳斯从来没有想过 Linux 能够获得如此巨大的成功。他只是为了自己方便写了一个操作系统内核并想借此获得一点回报而已，「假如我事先知道了要做到如 Linux 这般成功需要做多少基础和琐碎工作的话，那我肯定会相当沮丧的。这意味着你首先要非常优秀，并且你所做的大部分决定都导致了正确的结果。」 任何理智的人在登山之前凝望着高耸入云的山峰和崎岖艰险的山路时，都会陷于沮丧之中。解决办法就是先迈出第一步再说，然后，但行好事，莫问前程。 Linux 不仅给李纳斯带来了名声和财富，同时给大众带去了巨大的好处。年轻一代中最聪明的程序员和黑客都在使用 Linux 的产品，正是开放的 Linux 给这些天才的程序员带去了巨大的创作热情和喜悦，他们在 Linux 平台上完成了一个又一个杰出的作品，这些技术形成的生产力，对互联网的发展起到了巨大的推动作用，直到今天。 Linus（八）——巨星碰撞在 Linux 出现之前，桌面操作系统的市场基本上是由比老师和乔老师控制的，虽然乔老师控制的少了一些。Linux 出现之后，桌面操作系统的格局并没有太大变化，但是服务器端市场的变化却是翻天覆地的。原本比尔希望通过 Windows NT 和 Server 系列在服务器领域复制桌面操作系统的辉煌，从而千秋万载，一统江湖。然而，世界的发展永远是多元的，没人能通过一己之力改变历史发展的多维性，比尔·盖茨也不行。于是 Linux 出现了，并以星星之火可以燎原之势一举拿下服务器操作系统的半壁江山。 一方是商业公司和封闭的策略，另一方是自由软件和开放的协议，这场战争一开始支持率就是一边倒的，李纳斯就像对抗风车的堂·吉诃德，但是他自己不仅没有遍体鳞伤，还在没怎么亲自出场的情况下把微软这个软件风车搞得狼狈不堪，这种情况发生在现实生活中绝对是老百姓喜闻乐见的，李纳斯成了自由软件世界里的英雄和领袖，但也就此与微软结下了世仇，比尔和李纳斯许下了永世不相见的誓言。 有些加盟微软的朋友告诉李纳斯，他们曾见到他的头像被钉在了微软公司的飞镖靶心上。李纳斯对此的评价是：一定是我的大鼻子太好瞄准了。 李纳斯与另一位业界巨头苹果之间就没这么激进了，毕竟 Linux 和 OS X 师出同门，都是从老前辈 Unix 那儿毕业的，坐在一起还能唠唠家常，事实上李纳斯和乔布斯确实有过一次历史性的会面。 李纳斯来到硅谷不久，就收到了一封来自乔老师秘书的邮件，邮件中写到：「听闻小李飞刀光临硅谷，蓬荜生辉，老乔不才，重回苹果，以期振昔日之雄风，如得小李相助，必将如猛虎加之羽翼而翱翔四海，天下可得。期待会面。」（当然是意译） 李纳斯看完之后不明白乔布斯要干什么，只是觉得很厉害的样子。毕竟李纳斯还坐在外公腿上拨弄电脑键盘的时候，苹果的沃兹已经纯手动打造出苹果的第一代个人电脑 Apple I 了。李纳斯决定去见一下儿时的偶像，并了解一下苹果的新操作系统。 两代科技巨星的会面被安排在苹果总部 Infinity Loop，乔布斯带着原 Next 公司技术总监 Avie Tevanian（Mach 之父）接见了李纳斯，双方进行了友好而亲切的会谈，然后会谈的结果和某国常规会谈一样，就是没有结果。 其时乔布斯十年放逐回归苹果，举手投足已是大宗师气势，他对李纳斯说，我大苹果虽然现在看起来有点颓，不过海盗精神永存，我们已经准备好重新起航了。目前个人电脑领域仍然只有两个玩家：微软和苹果。如果 Linux 和苹果能够珠联璧合，那一切将是最好的安排，所有的开源爱好者都能够用上优雅与极客并存的 MacLinux 了。然后 Mach 之父 Avie Tevanian 向李纳斯详细介绍了整合 Mach 和 Linux 内核作为 OS X 混合内核的计划，之后庞大的 OS X 体系将构建在 Mach 和 Linux 内核的基础之上。 同时乔老师表示，基于 Mach 和 Linux 的内核系统将采用开源的方式运作，这样全世界的开源爱好者都可以为 Mac 和 Linux 开发程序。 这几乎是一个完美的双赢方案，乔老师都被自己描绘的蓝图打动了，永远年轻，永远他妈的热泪盈眶！谁能拒绝苹果公司和乔布斯如此完美的邀请呢？ 李纳斯能！ 乔布斯认为自己的扭曲现实力场加上苹果巨大的市场潜力一定会让李纳斯怦然心动，没想到这个芬兰小子在计算机面前待久了，水米油盐不进，任凭乔布斯口吐莲花，我自巍然不动。首先李纳斯对 Mach 就不感冒，他认为 Mach 几乎犯下了所有的设计错误，它让系统变得复杂而效率低下；其次李纳斯觉得乔布斯可能没意识到，Linux 的潜在用户要比苹果系统多；第三李纳斯乐观的认为，虽然 Linux 的目标不是占领桌面操作系统，但是显然「我们很快就能做到这一点了」。所以李纳斯当时的反应是： 为什么我要关心这些？我为什么要对苹果公司的故事感兴趣？我不觉得苹果公司里有什么有趣的事情。我的目标也不是占领什么桌面操作系统的市场。（嗯，虽然 Linux 马上就要做到这点了，但这从来就不是我的目标） 现在看来，李纳斯当时对 Linux 在桌面操作系统的前景过于乐观了，虽然他天纵奇才桀骜不驯，但是也无法预测到 OS X 和 iOS 在十年后引领移动开发的浪潮。不过即使知道 OS X 未来的大发展，心高气傲的李纳斯也不会接受苹果的收编，因为 Linux 一直是独立和自由的软件图腾。 无论如何，这次非正式的会谈没有达成任何实质性的效果，但是对后来的 IT 格局产生了巨大的影响。苹果不再关注 Linux，而是转向了 BSD。2001年苹果任命 FreeBSD 的发起人之一，老牌 BSD 黑客 Jordan Hubbard 为 BSD 技术经理，后升为 Unix 技术总监，负责 OS X 操作系统底层核心 Darwin 的研发，最终，Mach 与 BSD 技术整合在一起，形成了混合内核。另外，苹果开始觉得开源项目也不是那么靠谱，后续他们先后研发并开源了优秀的编译器项目 LLVM 和 Clang，一举替换了整条 GCC 编译链，为 OS X 和 iOS 的性能优化和语言特性提供了巨大的帮助。这也算是苹果对那些牛叉哄哄的开源人士的回击：看，我们也可以做开源，而且比你们做的好。 Linux 则继续在开源、独立、自由的方式下一路狂奔，虽然在桌面操作系统领域的成就乏善可陈，但是在服务器端大放异彩，目前几乎整个互联网都是运行在 Linux 及其衍生产品之上的，可以说没有 Linux，互联网不可能得到如此迅猛的发展。 十年以后，移动互联网时代来临。OS X 上长出了 iOS，Linux 上则诞生了 Android，这两个移动开发领域的双子星都有一个老祖宗，那就是 Unix。一次话不投机的会谈让 OS X 和 Linux 分道扬镳，在十几年后的今天，它们又以一种不同的方式相见了，世界永远都是多元的，可能冥冥中自有天意吧。 Linus（九）——Linus 和 Git很多人在完成了类似 Linux 这样宏伟的软件产品之后，基本上就止步不前了。但是李纳斯却从未停歇创新的脚步。2003年加入开放源代码开发实验室之后，李纳斯重新全职投入 Linux 内核的研发，并开始酝酿自己的另一个跨时代的产品。 2002年，Linux 内核开发团队开始采用 BitKepper 作为代码版本管理工具。BitKeeper 是一套分布式的版本管理工具，它满足了 Linux 内核开发的技术需求。但是 BitKeeper 只是暂时对 Linux 等开源软件团队免费，并不是自由软件。2005年 BitMover 公司不再免费赞助 Linux 开发团队。对此李纳斯表示非常遗憾，但遗憾之后他并没有自怨自艾伤心落泪，而是愤怒的与其他几个小伙伴花了几个星期完成了一套新的分布式代码管理工具，命名为 Git。两个月之后，Git 发布了官方版本，并在不同的项目中应用，自由软件社区给予了 Git 广泛的支持。 与 SVN 和 CVS 等软件不同的是，Git 更关注文件的整体性是否有改变，Git 更像一个文件系统，它允许开发者在本地获取各种数据，而不是随时都需要连接服务器。Git 的最大的特点就是离线分布式代码管理，速度飞快，适合管理大型项目，难以置信的非线性分支管理。 2005年 Git 发布之后，技术日臻成熟，很多大公司都开始采用 Git 管理自己的项目代码，2008年2月 Github 公司基于 Git 构建了协作式源代码托管网站 Github，目前该网站是这个星球上最大的源代码集散地，几乎所有的优秀代码都托管在 Github 上。Git 已经成为程序员使用最多的源代码管理工具！ 对于 Git 的成功，李纳斯表示： Git的设计其实很简单，它有一个稳定而合理的数据结构。事实上，我强烈建议围绕着数据来设计代码，而不是反其道而行之，我觉得这可能就是 Git 如此成功的原因。坏程序员总是担心他们的代码，而优秀的程序员则会担心数据结构和它们之间的关系。 从 Git 诞生到今天已经有9个年头了，Git 始终没有背离其设计的初衷：高性能、简单的设计、非线性高并发分支的支持和完全的分布式。 对于李纳斯来说，Git 现在是他的主要消遣工具之一。他很喜欢在 Git 上编程的感觉，因为再也不用担心锁定问题、安全问题和网络问题，这种感觉真是太美妙了！ 我们继续期待李纳斯的第三个伟大的作品！ Linus（十）——生活的意义李纳斯认为生活意义的全部就在于：生存，社会交往和寻找乐趣。因为我们所做的一切事情，最终似乎都是为了我们自己的乐趣。而进化作为主线始终贯穿其中。 李纳斯对进化的理解是： 你知道在整个太阳系，人类已知的最复杂的工程是什么吗？——不是Linux，不是Solaris，也不是你的汽车。是你，还有我。想想你和我都是怎么来的——不是什么超复杂的设计，没错，凭运气。除了运气，还有： 通过分享「源代码」实现自由的可用性和授粉机制，生物学家把它称作DNA。 毫不手软的用户环境把我们不好的版本轻易地替换成更好的可执行版本，从而使种群更加优秀（生物学家把这叫做「适者生存」）。 大量的无方向的并行开发（试错法）。我从未如此严肃过：我们人类永远都无法复制出比我们自身更复杂的个体，而自然选择却不假思索的做到了。不要低估适者生存的力量。不要错误地认为你可以做出比大量的平行试错反馈环更好的设计，那样就太抬举你的智力水平了。说实话，太阳照常升起，这和任何人的工程技巧或者编程风格都没有关系。 李纳斯一生只为寻找欢笑，但是他却取得了无数的成就和荣誉： 1997年，在芬兰赫尔辛基大学计算机科学系，李纳斯接受了他的硕士学位。两年后，他在斯德哥尔摩大学接受名誉博士学位，并在2000年在他的母校获得了同样的荣誉。 1998年，李纳斯接受了电子前哨基金会先锋奖。 2004年，李纳斯被《时代》杂志选为世界上最有影响力的人之一。 2006年，《时代》杂志欧洲版评选李纳斯为过去60年最有革命性的英雄人物之一。 2012年4月20日，托瓦兹被宣布成为两位获奖者之一，和山中伸弥共同获得当年的千禧技术奖。该奖被普遍形容为相当于在技术领域的诺贝尔奖。 2012年4月23日，李纳斯进入互联网协会（Internet Society，ISOC）的网络名人堂。 李纳斯憎恶分明，经常口不择言，比如他对 C++的评价是：C++是一门糟糕的语言。而且有一群不合格的程序员在使用C++，他们让它变得更糟糕了。他对自己的两个产品命名的解释是：我是个自大的混蛋，我所有的项目都以我的名字来命名。开始是Linux， 然后是Git（英国俚语，饭桶的意思）。 不过我最喜欢李纳斯说过的一句话是：Talk is cheap, Show me the code。他一直用自己的编程人生诠释着这句话。2006年的时候，Linux 内核代码的2%依然是李纳斯完成的，他是代码贡献最多的人之一（是年37岁）。到了2012年，他对内核的贡献主要是合并代码，编程变少了，但是他依然对是否将新代码并入到 Linux 内核具有最终决定权。 李纳斯用自己精彩的编程人生和对自由软件的热爱演绎了现代社会中一个书呆子的胜利。如果你爱一个人，就让他去编程吧；如果你恨一个人，就让他去编程吧。代码让我们欢笑，也让我们忧伤，让我们沉默，也让我们高歌。对于程序员来说，代码是这个世界上最美妙的音乐，会编程的孩子，都是好孩子！","categories":[],"tags":[],"keywords":[]},{"title":"PDCA循环和SMART原则","slug":"PDCA循环和SMART原则","date":"2018-12-10T15:08:50.000Z","updated":"2018-12-10T15:13:47.000Z","comments":true,"path":"2018/12/10/PDCA循环和SMART原则/","link":"","permalink":"https://blog.hitime.wiki/2018/12/10/PDCA循环和SMART原则/","excerpt":"","text":"","categories":[],"tags":[],"keywords":[]},{"title":"MySQL索引原理及分类","slug":"MySQL索引原理及分类","date":"2018-12-08T13:40:21.000Z","updated":"2018-12-08T14:16:26.000Z","comments":true,"path":"2018/12/08/MySQL索引原理及分类/","link":"","permalink":"https://blog.hitime.wiki/2018/12/08/MySQL索引原理及分类/","excerpt":"","text":"[转载并整理自：https://www.cnblogs.com/bypp/p/7755307.html] 一、介绍1.什么是索引？一般的应用系统，读写比例在10:1左右，而且插入操作和一般的更新操作很少出现性能问题，在生产环境中，我们遇到最多的，也是最容易出问题的，还是一些复杂的查询操作，因此对查询语句的优化显然是重中之重。说起加速查询，就不得不提到索引了。 2.为什么要有索引呢？索引在MySQL中也叫做“键”，是存储引擎用于快速找到记录的一种数据结构。索引对于良好的性能非常关键，尤其是当表中的数据量越来越大时，索引对于性能的影响愈发重要。索引优化应该是对查询性能优化最有效的手段了，索引能够轻易将查询性能提高好几个数量级。索引相当于字典的音序表，如果要查某个字，如果不使用音序表，则需要从几百页中逐页去查。 二、索引原理1.索引的原理索引的目的在于提高查询效率，与我们查阅图书所用的目录是一个道理：先定位到章，然后定位到该章下的一个小节，然后找到页数。相似的例子还有：查字典，查火车车次，飞机航班等。本质都是：通过不断地缩小想要获取数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是说，有了这种索引机制，我们可以总是用同一种查找方式来锁定数据。数据库也是一样，但显然要复杂的多，因为不仅面临着等值查询，还有范围查询(&gt;、&lt;、between、in)、模糊查询(like)、并集查询(or)等等。数据库应该选择怎么样的方式来应对所有的问题呢？我们回想字典的例子，能不能把数据分成段，然后分段查询呢？最简单的如果1000条数据，1到100分成第一段，101到200分成第二段，201到300分成第三段……这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。但如果是1千万的记录呢，分成几段比较好？稍有算法基础的同学会想到搜索树，其平均复杂度是lgN，具有不错的查询性能。但这里我们忽略了一个关键的问题，复杂度模型是基于每次相同的操作成本来考虑的。而数据库实现比较复杂，一方面数据是保存在磁盘上的，另外一方面为了提高性能，每次又可以把部分数据读入内存来计算，因为我们知道访问磁盘的成本大概是访问内存的十万倍左右，所以简单的搜索树难以满足复杂的应用场景。 2.磁盘IO与预读考虑到磁盘IO是非常高昂的操作，计算机操作系统做了一些优化，当一次IO时，不光把当前磁盘地址的数据，而是把相邻的数据也都读取到内存缓冲区内。因为局部预读性原理告诉我们，当计算机访问一个地址的数据的时候，与其相邻的数据也会很快被访问到。每一次IO读取的数据我们称之为一页(page)。具体一页有多大数据跟操作系统有关，一般为4k或8k，也就是我们读取一页内的数据时候，实际上才发生了一次IO，这个理论对于索引的数据结构设计非常有帮助。 3.索引的数据结构任何一种数据结构都不是凭空产生的，一定会有它的背景和使用场景，我们现在总结一下，我们需要这种数据结构能够做些什么，其实很简单，那就是：每次查找数据时把磁盘IO次数控制在一个很小的数量级，最好是常数数量级。那么我们就想到如果一个高度可控的多路搜索树是否能满足需求呢？就这样，b+树应运而生。如上图，是一颗b+树，关于b+树的定义可以参见B+树，这里只说一些重点，浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。真实的数据存在于叶子节点即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点只不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。 b+树的查找过程如图所示，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。 b+树性质1.索引字段要尽量的小：通过上面的分析，我们知道IO次数取决于b+数的高度h，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；而m = 磁盘块的大小 / 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。这也是为什么b+树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。2.索引的最左匹配特性（即从左往右匹配）：当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。 三、索引分类1.索引分类 普通索引index:加速查找 唯一索引 a. 主键索引:primary key ：加速查找+约束（不为空且唯一） b. 唯一索引:unique：加速查找+约束 （唯一） 联合索引 a. primary key(id,name):联合主键索引 b. unique(id,name):联合唯一索引 c. index(id,name):联合普通索引 全文索引fulltext:用于搜索很长一篇文章的时候，效果最好。 空间索引spatial:了解就好，几乎不用。 2.索引的两大类型hash与btreehash类型的索引：查询单条快，范围查询慢btree类型的索引：b+树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它） 四、注意事项不同的存储引擎支持的索引类型也不一样InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引(开启配置后可以支持自适应Hash索引)；MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；","categories":[],"tags":[],"keywords":[]},{"title":"Git分支管理","slug":"Git分支管理","date":"2018-11-08T13:40:21.000Z","updated":"2018-12-14T15:11:18.000Z","comments":true,"path":"2018/11/08/Git分支管理/","link":"","permalink":"https://blog.hitime.wiki/2018/11/08/Git分支管理/","excerpt":"","text":"Git分支功能十分强大，管理方案也多种多样，对于不同的团队规模及开发方式会有不同的分支管理方案。对于我们团队我设想的分支管理方案会结合Sprint的管理方式进行设计，总体思路按照功能分支+测试环境分支方式进行管理，详细管理方式如下： 阶段一：Sprint开始，工期确认及功能分支创建Sprint敲定，任务及工期认领完毕，确定对应系统从master创建功能分支。功能分支命名方式： 命名规则：feature/\\${Sprint截止日期}/\\${功能名称}命名示例：feature/20181018/mortgageUpdate 对于当前阶段，Sprint截止日期默认为功能上线日期，在开发过程中同一功能开发人员将开发完毕的功能Push到当前功能分支。 阶段二：开发联调阶段如果功能涉及到多方联调可以选择使用Profile为local的配置文件对接对应系统的开发环境进行本地联调也可以将功能分支发布到开发环境进行开发环境联调。开发环境分支默认名称为dev，开发人员将对应功能分支合并到开发分支并完成相关配置可以进行开发联调。 阶段三：功能提测，合并到测试分支测试分支命名规则和开发分支不太相同，为了能够将不同阶段的Sprint功能不冲突的提测，测试环境分为两套环境并且可以选择发布对应分支。 命名规则：test/${Sprint截止日期}命名示例：test/20181018 需要注意的是，在测试阶段的分支不再带功能名称，因为此刻同一Sprint阶段的不同功能会汇集到此测试分支进行全覆盖测试。QA已经提供两套测试环境可以并行两个Sprint版本开发及测试。另外需要注意的是测试分支从功能分支直接合并而来不再经过dev分支。 阶段四：Sprint结束，功能上线功能上线前，将Sprint对应的测试分支合并到master上，一旦出现冲突使用git merge —abort终止合并以保证master分支干净然后将master分支合并到当前测试分支并解决冲突后再合并到master。合并完成后给master打上tag方便下次发布错误后使用该tag进行回滚，添加tag命令：git tag -a v1.4 -m ’my version 1.4‘ 异常情况：线上出现问题使用热修复分支线上功能出现问题需要紧急修复，此时从master迁出热修复分支，命名方式如下： 命名规则：${修复日期}_hotfix命名示例：20181018_hotfix 该分支为热修复分支为了尽快修复线上问题经过验证后不需要再合并到测试分支直接合并到master分支做紧急发布。","categories":[],"tags":[],"keywords":[]}]}